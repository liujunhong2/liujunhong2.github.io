<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello</title>
    <url>/First-blog.html</url>
    <content><![CDATA[<p>Hello hexo. Hello blog. Hello world</p>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
  </entry>
  <entry>
    <title>algorithm</title>
    <url>/algorithm.html</url>
    <content><![CDATA[<h1 id="算法汇总"><a href="#算法汇总" class="headerlink" title="算法汇总"></a>算法汇总</h1><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><p>从某一基点到其他所有点的最短路</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n, m, st;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m &gt;&gt; st;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">distance</span><span class="params">(n + <span class="number">1</span>, INT_MAX)</span></span>;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">visited</span><span class="params">(n + <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">	vector&lt;vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;&gt; <span class="built_in">g</span>(n + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, u, v, w; i &lt; m; i ++)&#123;</span><br><span class="line">		cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">		g[u].<span class="built_in">push_back</span>(&#123;v, w&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;,greater&lt;&gt;&gt; q1;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> it : g[st])&#123;</span><br><span class="line">		q<span class="number">1.</span><span class="built_in">push</span>(&#123;it.second,it.first&#125;);	</span><br><span class="line">	&#125;</span><br><span class="line">	distance[st] = <span class="number">0</span>;</span><br><span class="line">	pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; temp;</span><br><span class="line">	<span class="type">int</span> u, w, v;</span><br><span class="line">	<span class="keyword">while</span>(!q<span class="number">1.</span><span class="built_in">empty</span>())&#123;</span><br><span class="line">		temp = q<span class="number">1.</span><span class="built_in">top</span>();</span><br><span class="line">		q<span class="number">1.</span><span class="built_in">pop</span>();</span><br><span class="line">		u = temp.second;</span><br><span class="line">		w = temp.first;</span><br><span class="line">		<span class="keyword">if</span>(visited[u]) <span class="keyword">continue</span>;</span><br><span class="line">		visited[u] = <span class="literal">true</span>;</span><br><span class="line">		distance[u] = w;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> it : g[u])&#123;</span><br><span class="line">			v = it.first;</span><br><span class="line">			<span class="keyword">if</span>(!visited[v] &amp;&amp; it.second + distance[u] &lt; distance[v])&#123;</span><br><span class="line">				q<span class="number">1.</span><span class="built_in">push</span>(&#123;it.second + distance[u], v&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">		cout &lt;&lt; distance[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p>分类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递归找祖先</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != fa[x]) fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">U</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    fa[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="built_in">find</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="常见二分"><a href="#常见二分" class="headerlink" title="常见二分"></a>常见二分</h3><p>加速查询</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v1 = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ,<span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最小大于等于</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">F1</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> r = v<span class="number">1.</span><span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> ans, mid;</span><br><span class="line">	<span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">		mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(x &gt;= v1[mid])&#123;</span><br><span class="line">			ans = mid;</span><br><span class="line">			l = mid - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最小大于</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">F2</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> r = v<span class="number">1.</span><span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> ans, mid;</span><br><span class="line">	<span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">		mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(x &gt; v1[mid])&#123;</span><br><span class="line">			ans = mid;</span><br><span class="line">			l = mid - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最长递增子序列</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">F1</span><span class="params">(<span class="type">int</span> x, vector&lt;<span class="type">int</span>&gt; &amp; v)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> r = v<span class="number">1.</span><span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> mid;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">		mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(x &gt; v[mid]) l = mid + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			r = mid - <span class="number">1</span>;</span><br><span class="line">			ans = mid;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最长递减子序列</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">F2</span><span class="params">(<span class="type">int</span> x, vector&lt;<span class="type">int</span>&gt; &amp; v)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> r = v<span class="number">1.</span><span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> mid;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">		mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(x &lt; v[mid]) l = mid + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			r = mid - <span class="number">1</span>;</span><br><span class="line">			ans = mid;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="博弈论（SG定理）"><a href="#博弈论（SG定理）" class="headerlink" title="博弈论（SG定理）"></a>博弈论（SG定理）</h3><p>所有相同子游戏最终<code>sg</code>异或结果为0则先手必败，不为零则先手必胜，<code>sg</code>为从某一节点开始，到最大限度往前便利后的第一个没有出现的自然数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="ordered-set"><a href="#ordered-set" class="headerlink" title="ordered_set"></a>ordered_set</h3><p>解释各个部分的作用</p>
<table>
<thead>
<tr>
<th>代码部分</th>
<th>功能</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>s.insert(5)</code></td>
<td>插入元素</td>
<td><code>ordered_set</code> 自动去重</td>
</tr>
<tr>
<td><code>s.erase(7)</code></td>
<td>删除元素</td>
<td>需先检查元素是否存在</td>
</tr>
<tr>
<td><code>find_by_order(k)</code></td>
<td>获取第 k 小元素</td>
<td><code>0-based</code>，需先检查是否为空</td>
</tr>
<tr>
<td><code>order_of_key(10)</code></td>
<td>获取小于某个值的元素数量</td>
<td><code>O(log n)</code> 复杂度</td>
</tr>
<tr>
<td><code>find(5)</code></td>
<td>查找元素</td>
<td>直接返回迭代器</td>
</tr>
<tr>
<td><code>s.size()</code></td>
<td>获取集合大小</td>
<td><code>O(1)</code> 复杂度</td>
</tr>
<tr>
<td><code>s.clear()</code></td>
<td>清空集合</td>
<td>直接清空</td>
</tr>
</tbody></table>
<p>时间复杂度</p>
<ul>
<li>插入：<code>O(log n)</code></li>
<li>删除：<code>O(log n)</code></li>
<li>查找：<code>O(log n)</code></li>
<li>获取第 k 小元素：<code>O(log n)</code></li>
<li>获取小于 x 的元素数量：<code>O(log n)</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext/pb_ds/tree_policy.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> tree&lt;</span><br><span class="line">    <span class="type">int</span>, </span><br><span class="line">    null_type, </span><br><span class="line">    less&lt;<span class="type">int</span>&gt;, </span><br><span class="line">    rb_tree_tag, </span><br><span class="line">    tree_order_statistics_node_update</span><br><span class="line">&gt; ordered_set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ordered_set s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ✅ 插入元素（重复元素会被自动忽略）</span></span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ✅ 删除元素前先检查</span></span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">find</span>(<span class="number">7</span>) != s.<span class="built_in">end</span>()) s.<span class="built_in">erase</span>(<span class="number">7</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ✅ 获取第 k 小的元素 (0-based)，需先检查集合大小</span></span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The 2nd smallest element is: &quot;</span> &lt;&lt; *s.<span class="built_in">find_by_order</span>(<span class="number">1</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ✅ 获取小于 x 的元素数量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Number of elements smaller than 10: &quot;</span> &lt;&lt; s.<span class="built_in">order_of_key</span>(<span class="number">10</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ✅ 判断某个元素是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">find</span>(<span class="number">5</span>) != s.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;5 exists in the set\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ✅ 查找某个元素的迭代器</span></span><br><span class="line">    <span class="keyword">auto</span> it = s.<span class="built_in">find</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (it != s.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;5 is found in the set\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ✅ 获取集合大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Size of the set: &quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ✅ 获取最大值与最小值（非空时）</span></span><br><span class="line">    <span class="keyword">if</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Minimum element: &quot;</span> &lt;&lt; *s.<span class="built_in">find_by_order</span>(<span class="number">0</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Maximum element: &quot;</span> &lt;&lt; *s.<span class="built_in">find_by_order</span>(s.<span class="built_in">size</span>() - <span class="number">1</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ✅ 清空集合</span></span><br><span class="line">    s.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><h3 id="重载运算符号"><a href="#重载运算符号" class="headerlink" title="重载运算符号"></a>重载运算符号</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">my</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r, index;</span><br><span class="line">    <span class="built_in">my</span>(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)&#123;</span><br><span class="line">        l = a, r = b, index = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> my x) <span class="type">const</span> &#123;  </span><br><span class="line">        	<span class="comment">// 优先队列中比较关系反着来</span></span><br><span class="line">            <span class="keyword">return</span> l &gt; x.l;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="求最大的最小或者最小的最大问题"><a href="#求最大的最小或者最小的最大问题" class="headerlink" title="求最大的最小或者最小的最大问题"></a>求最大的最小或者最小的最大问题</h3><p>大概率是用二分来查询最合适的答案，具体算法看题</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>cycle</title>
    <url>/cycle.html</url>
    <content><![CDATA[<h1 id="铁腚行"><a href="#铁腚行" class="headerlink" title="铁腚行"></a>铁腚行</h1><hr>
<h2 id="已备骑行装备"><a href="#已备骑行装备" class="headerlink" title="已备骑行装备"></a>已备骑行装备</h2><ol>
<li>公路车<br>喜德盛RC200 <span class="price" data-price="1499">1499￥</span></li>
</ol>
<p>入门级公路车， 速度一般（上限不高，毕竟是入门，先练腿，6分），颜值还可以（7分），刹车不太行（<del>4分</del>， 前刹调到能完全夹住轮胎其实能到6分）（满分10分）</p>
<ol start="2">
<li>护目镜：</li>
</ol>
<p>匹克日常 <span class="price" data-price="39">39￥</span>  </p>
<p>防风沙烈日，实用</p>
<ol start="3">
<li>手机支架</li>
</ol>
<p>ROCKBROS洛克兄弟手机支架 <span class="price" data-price="29">29￥</span>  </p>
<p>性价比高，质量还可以，颜值也过得去</p>
<ol start="4">
<li>骑行头盔</li>
</ol>
<p>GUB M5 Mips骑行头盔 <span class="price" data-price="239">239￥</span>  </p>
<p>不怕一万，就怕万一</p>
<ol start="5">
<li>运动手套</li>
</ol>
<p>维动 VEIDOORN 半指 <span class="price" data-price="39">39￥</span>  </p>
<p>防滑、吸汗、减震</p>
<ol start="6">
<li>水壶 + 水壶架</li>
</ol>
<p>ROCKBROS洛克兄弟户外水壶 + 水壶架 <span class="price" data-price="35">35￥</span>  </p>
<p>远距离骑行必备</p>
<ol start="7">
<li>坐垫</li>
</ol>
<p>ROCKBROS洛克兄弟坐垫 <span class="price" data-price="39">39￥</span>  </p>
<p>我的建议是练腚</p>
<ol start="8">
<li>尾灯</li>
</ol>
<p>美利达自行车智能感应刹车灯 <span class="price" data-price="30">30￥</span>  </p>
<p>越亮越好，最好是有急停时高亮的，相当于大大的实习标  </p>
<ol start="9">
<li>束裤脚弹力绷带</li>
</ol>
<p>三无产品 <span class="price" data-price="3">3￥</span>  </p>
<p>无专业骑行裤之前的保护措施</p>
<hr>
<p>总价:  <span id="total-price">计算中…</span></p>
<h2 id="总行程"><a href="#总行程" class="headerlink" title="总行程"></a>总行程</h2><p>2025-3-1之前: <span class="distance" data-distance="147">147 km</span>  </p>
<p>2025-3-1: <span class="distance" data-distance="150"> 150 km </span></p>
<p>2025-3-11 <span class="distance" data-distance="40"> 40 km </span></p>
<p>2025-3-15 <span class="distance" data-distance="13"> 13 km </span></p>
<p>2025-3-18 <span class="distance" data-distance="40"> 40 km </span></p>
<p>2025-3-25 <span class="distance" data-distance="40"> 40 km </span></p>
<p>总行程: <span id="total-distance">计算中…</span></p>
<script>
document.addEventListener("DOMContentLoaded", function () {
    // 计算总价格
    let totalPrice = 0;
    document.querySelectorAll(".price").forEach(item => {
        totalPrice += parseFloat(item.getAttribute("data-price"));
    });
    document.getElementById("total-price").innerText = totalPrice.toFixed(2) + "￥";

    // 计算总距离
    let totalDistance = 0;
    document.querySelectorAll(".distance").forEach(item => {
        totalDistance += parseFloat(item.getAttribute("data-distance"));
    });
    document.getElementById("total-distance").innerText = totalDistance + " km";
});
</script>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>bike</tag>
      </tags>
  </entry>
  <entry>
    <title>Git better</title>
    <url>/learngit.html</url>
    <content><![CDATA[<h1 id="Git常用指令"><a href="#Git常用指令" class="headerlink" title="Git常用指令"></a>Git常用指令</h1><ul>
<li>自报家门</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li>pwd 用于显示当前目录</li>
</ul>
<p><code>$ pwd</code></p>
<hr>
<ul>
<li>init 把当前目录变成Git可以管理的仓库</li>
</ul>
<p><code>$ git init</code></p>
<hr>
<ul>
<li>la -ah 用于查看隐藏的.git目录</li>
</ul>
<p><code>$ ls -ah</code></p>
<hr>
<ul>
<li>add 把文件添加到仓库</li>
</ul>
<p><code>$ git add &lt;file&gt;</code></p>
<hr>
<ul>
<li>commit 把文件提交到仓库</li>
</ul>
<p><code>$ git commit -m &lt;message&gt;</code></p>
<hr>
<ul>
<li>status 查看库状态</li>
</ul>
<p><code>$ git status</code></p>
<hr>
<ul>
<li>dif 查看修改内容</li>
</ul>
<p><code>$ git diff &lt;file&gt;</code></p>
<hr>
<ul>
<li>log 查看历史记录</li>
</ul>
<p><code>$ git log</code><br><code>$ git log --pretty=oneline</code></p>
<ul>
<li>reflog 查看每一次命令</li>
</ul>
<p><code>$ git reflog</code></p>
<hr>
<ul>
<li>reset 版本回退</li>
</ul>
<p>–hard会回退到上个版本的已提交状态，而–soft会回退到上个版本的未提交状态，–mixed会回退到上个版本已添加但未提交的状态.</p>
<p><code>$ git reset --hard HEAD~&lt;num&gt;</code><br><code>$ git reset --hard &lt;version&gt;</code></p>
<hr>
<ul>
<li>cat 查看内容</li>
</ul>
<p><code>$ cat &lt;file&gt;</code></p>
<hr>
<ul>
<li>撤销工作区修改</li>
</ul>
<p><code>$ git checkout -- &lt;file&gt;</code></p>
<ul>
<li>撤销暂存区修改</li>
</ul>
<p><code>$ git reset HEAD &lt;file&gt;</code></p>
<hr>
<ul>
<li>删除文件</li>
</ul>
<p><code>$ git rm &lt;file&gt;</code></p>
<hr>
<ul>
<li>添加远程库</li>
</ul>
<p><code>$ git remote add origin git@github.com:&lt;yourname&gt;/learngit.git</code></p>
<ul>
<li>推送</li>
</ul>
<p><code>$ git push -u origin master</code></p>
<ul>
<li>本地做了提交后</li>
</ul>
<p><code>$ git push origin master</code></p>
<ul>
<li>查看远程库信息</li>
</ul>
<p><code>$ git remote -v</code></p>
<ul>
<li>删除远程库</li>
</ul>
<p><code>$ git remote rm &lt;name&gt;</code></p>
<hr>
<ul>
<li>克隆</li>
</ul>
<p><code>$ git clone git@github.com:&lt;name&gt;/gitskills.git</code></p>
<hr>
<ul>
<li>创建并切换至新分支</li>
</ul>
<p><code>$ git checkout -b &lt;name&gt;</code><br><code>$ git switch -c &lt;name&gt;</code> </p>
<p>等同于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git switch master</span><br></pre></td></tr></table></figure>

<ul>
<li>查看分支</li>
</ul>
<p><code>$ git branch</code></p>
<ul>
<li>合并分支</li>
</ul>
<p><code>$ git merge &lt;name&gt;</code></p>
<ul>
<li>删除分支</li>
</ul>
<p><code>$ git branch -d &lt;name&gt;</code></p>
<ul>
<li>强制删除</li>
</ul>
<p><code>$ git branch -D &lt;name&gt;</code></p>
<ul>
<li><code>--no-ff</code>方式的<code>git merge</code></li>
</ul>
<p><code>$ git merge --no-ff -m &quot;merge with no-ff&quot; &lt;name&gt;</code></p>
<ul>
<li>stash储藏工作现场</li>
</ul>
<p><code>$ git stash</code></p>
<ul>
<li>查看</li>
</ul>
<p><code>$ git stash list</code></p>
<ul>
<li>恢复现场</li>
</ul>
<p>恢复并删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash apply</span><br><span class="line">$ git stash drop</span><br></pre></td></tr></table></figure>
<p>或<br><code>$ git stash pop</code></p>
<ul>
<li>复制修改</li>
</ul>
<p><code>$ git cherry-pick &lt;version&gt;</code></p>
<ul>
<li>推送冲突后抓取文件到本地合并</li>
</ul>
<p><code>$ git pull</code></p>
<ul>
<li>变基</li>
</ul>
<p><code>$ git rebase</code></p>
<hr>
<ul>
<li>打标签</li>
</ul>
<p><code>$ git tag &lt;tag&gt;</code><br><code>$ git tag &lt;tag&gt; &lt;version&gt;</code></p>
<p>还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：</p>
<p><code>$ git tag -a &lt;tag&gt; -m &quot;info&quot; &lt;version&gt;</code></p>
<ul>
<li>查看标签</li>
</ul>
<p><code>$ git tag</code></p>
<ul>
<li>查看标签内容</li>
</ul>
<p><code>$ git show &lt;tag&gt;</code></p>
<ul>
<li>删除标签</li>
</ul>
<p><code>$ git tag -d &lt;tag&gt;</code></p>
<ul>
<li>推送标签</li>
</ul>
<p><code>$ git push origin &lt;tag&gt;</code><br><code>$ git push origin --tags</code></p>
<ul>
<li>删除远程标签</li>
</ul>
<p>先删除本地再：<br><code>$ git push origin :refs/tags/&lt;tag&gt;</code></p>
<p>补充</p>
<p><img src="/learngit/git1.png" alt="git1"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://liaoxuefeng.com/">廖雪峰</a></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Better</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo better</title>
    <url>/learnhexo.html</url>
    <content><![CDATA[<h1 id="来时路"><a href="#来时路" class="headerlink" title="来时路"></a>来时路</h1><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1：无法初始化"><a href="#1：无法初始化" class="headerlink" title="1：无法初始化"></a>1：无法初始化</h3><p>hexo init （blog）时因为代理无法正常初始化完成，修改代理地址，例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:7890</span><br><span class="line">git config --global https.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure>

<p>这将允许 Git 通过本地代理进行连接。如果不再需要代理，或者想要清除代理设置，可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>


<h3 id="2：npm速度慢"><a href="#2：npm速度慢" class="headerlink" title="2：npm速度慢"></a>2：npm速度慢</h3><p><a href="https://npmmirror.com/">淘宝镜像</a></p>
<p><img src="/learnhexo/taobao1.png" alt="p1"></p>
<p>之后在npm前加个c!</p>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="建站前"><a href="#建站前" class="headerlink" title="建站前"></a>建站前</h3><p>在gitbase中cd到博客文件夹</p>
<p>下载hexo框架</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<hr>
<p>初始化博客项目（若已经在下一级文件夹中可不加folder）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init [folder] </span><br></pre></td></tr></table></figure>
<hr>
<p>进入folder</p>
<p>安装依赖项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<hr>
<p>下载部署器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<hr>
<p>之后可随时部署到Github上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h3 id="建站后"><a href="#建站后" class="headerlink" title="建站后"></a>建站后</h3><p>new 新建一篇文章</p>
<p>-p 自定义文章路径</p>
<p>-r 如果存在则替换</p>
<p>-s 文章别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p>clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br></pre></td></tr></table></figure>
<hr>
<p>generate 生成静态文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<hr>
<p>publish 发布草稿</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p>server 启动服务器</p>
<p>-p 重设端口</p>
<p>-s 只使用静态文件</p>
<p>-l 启用日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<hr>
<p>deploy 部署网站</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<hr>
<p>render 渲染文件<br>-o output destination</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>
<hr>
<p>migrate 从其他博客系统迁移内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo migrate&lt;type&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p>list 列出所有路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p>version 显示版本信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure>
<hr>
<p>config 列出网站的配置（_config.yml）。 如果指定了 key，则只展示配置中对应 key 的值；如果同时指定了 key 和 value，则将配置中对应的 key 的值修改为 value。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo config [key] [value]</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://dayuzy.com/">资深技术博客</a></p>
<p><a href="https://blog.csdn.net/cat_bayi/article/details/128725230">CSDN良心教学</a></p>
<p><a href="https://mp.weixin.qq.com/s/GmTmhpkB0QmoHIL5bmXQGw">小岛码农</a></p>
<p><a href="https://hexo.io/zh-cn/">官方文档</a></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>Better</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
