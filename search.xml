<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello</title>
    <url>/First-blog.html</url>
    <content><![CDATA[<p>Hello hexo. Hello blog. Hello world</p>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
  </entry>
  <entry>
    <title>cycle</title>
    <url>/cycle.html</url>
    <content><![CDATA[<h1 id="铁腚行"><a href="#铁腚行" class="headerlink" title="铁腚行"></a>铁腚行</h1><hr>
<h2 id="已备骑行装备"><a href="#已备骑行装备" class="headerlink" title="已备骑行装备"></a>已备骑行装备</h2><ol>
<li>公路车<br>喜德盛RC200 <span class="price" data-price="1499">1499￥</span></li>
</ol>
<p>入门级公路车， 速度一般（上限不高，毕竟是入门，先练腿，6分），颜值还可以（7分），刹车不太行（<del>4分</del>， 前刹调到能完全夹住轮胎其实能到6分）（满分10分）</p>
<ol start="2">
<li>护目镜：</li>
</ol>
<p>匹克日常 <span class="price" data-price="39">39￥</span>  </p>
<p>防风沙烈日，实用</p>
<ol start="3">
<li>手机支架</li>
</ol>
<p>ROCKBROS洛克兄弟手机支架 <span class="price" data-price="29">29￥</span>  </p>
<p>性价比高，质量还可以，颜值也过得去</p>
<ol start="4">
<li>骑行头盔</li>
</ol>
<p>GUB M5 Mips骑行头盔 <span class="price" data-price="239">239￥</span>  </p>
<p>不怕一万，就怕万一</p>
<ol start="5">
<li>运动手套</li>
</ol>
<p>维动 VEIDOORN 半指 <span class="price" data-price="39">39￥</span>  </p>
<p>防滑、吸汗、减震</p>
<ol start="6">
<li>水壶 + 水壶架</li>
</ol>
<p>ROCKBROS洛克兄弟户外水壶 + 水壶架 <span class="price" data-price="35">35￥</span>  </p>
<p>远距离骑行必备</p>
<ol start="7">
<li>坐垫</li>
</ol>
<p>ROCKBROS洛克兄弟坐垫 <span class="price" data-price="39">39￥</span>  </p>
<p>我的建议是练腚</p>
<ol start="8">
<li>尾灯</li>
</ol>
<p>美利达自行车智能感应刹车灯 <span class="price" data-price="30">30￥</span>  </p>
<p>越亮越好，最好是有急停时高亮的，相当于大大的实习标  </p>
<ol start="9">
<li>束裤脚弹力绷带</li>
</ol>
<p>三无产品 <span class="price" data-price="3">3￥</span>  </p>
<p>无专业骑行裤之前的保护措施</p>
<hr>
<p>总价:  <span id="total-price">计算中…</span></p>
<h2 id="总行程"><a href="#总行程" class="headerlink" title="总行程"></a>总行程</h2><p>2025-3-1之前: <span class="distance" data-distance="147">147 km</span>  </p>
<p>2025-3-1: <span class="distance" data-distance="150"> 150 km </span></p>
<p>2025-3-11 <span class="distance" data-distance="40"> 40 km </span></p>
<p>2025-3-15 <span class="distance" data-distance="13"> 13 km </span></p>
<p>2025-3-18 <span class="distance" data-distance="40"> 40 km </span></p>
<p>2025-3-25 <span class="distance" data-distance="40"> 40 km </span></p>
<p>总行程: <span id="total-distance">计算中…</span></p>
<script>
document.addEventListener("DOMContentLoaded", function () {
    // 计算总价格
    let totalPrice = 0;
    document.querySelectorAll(".price").forEach(item => {
        totalPrice += parseFloat(item.getAttribute("data-price"));
    });
    document.getElementById("total-price").innerText = totalPrice.toFixed(2) + "￥";

    // 计算总距离
    let totalDistance = 0;
    document.querySelectorAll(".distance").forEach(item => {
        totalDistance += parseFloat(item.getAttribute("data-distance"));
    });
    document.getElementById("total-distance").innerText = totalDistance + " km";
});
</script>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>bike</tag>
      </tags>
  </entry>
  <entry>
    <title>algorithm</title>
    <url>/algorithm.html</url>
    <content><![CDATA[<h1 id="算法汇总"><a href="#算法汇总" class="headerlink" title="算法汇总"></a>算法汇总</h1><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><p>从某一基点到其他所有点的最短路</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n, m, st;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m &gt;&gt; st;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">distance</span><span class="params">(n + <span class="number">1</span>, INT_MAX)</span></span>;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">visited</span><span class="params">(n + <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">	vector&lt;vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;&gt; <span class="built_in">g</span>(n + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, u, v, w; i &lt; m; i ++)&#123;</span><br><span class="line">		cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">		g[u].<span class="built_in">push_back</span>(&#123;v, w&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;,greater&lt;&gt;&gt; q1;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> it : g[st])&#123;</span><br><span class="line">		q<span class="number">1.</span><span class="built_in">push</span>(&#123;it.second,it.first&#125;);	</span><br><span class="line">	&#125;</span><br><span class="line">	distance[st] = <span class="number">0</span>;</span><br><span class="line">	pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; temp;</span><br><span class="line">	<span class="type">int</span> u, w, v;</span><br><span class="line">	<span class="keyword">while</span>(!q<span class="number">1.</span><span class="built_in">empty</span>())&#123;</span><br><span class="line">		temp = q<span class="number">1.</span><span class="built_in">top</span>();</span><br><span class="line">		q<span class="number">1.</span><span class="built_in">pop</span>();</span><br><span class="line">		u = temp.second;</span><br><span class="line">		w = temp.first;</span><br><span class="line">		<span class="keyword">if</span>(visited[u]) <span class="keyword">continue</span>;</span><br><span class="line">		visited[u] = <span class="literal">true</span>;</span><br><span class="line">		distance[u] = w;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> it : g[u])&#123;</span><br><span class="line">			v = it.first;</span><br><span class="line">			<span class="keyword">if</span>(!visited[v] &amp;&amp; it.second + distance[u] &lt; distance[v])&#123;</span><br><span class="line">				q<span class="number">1.</span><span class="built_in">push</span>(&#123;it.second + distance[u], v&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">		cout &lt;&lt; distance[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p>分类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递归找祖先</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != fa[x]) fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">U</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    fa[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="built_in">find</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="常见二分"><a href="#常见二分" class="headerlink" title="常见二分"></a>常见二分</h3><p>加速查询</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v1 = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ,<span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">// 最小大于等于</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">F1</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> r = v<span class="number">1.</span><span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> ans, mid;</span><br><span class="line">	<span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">		mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(x &gt;= v1[mid])&#123;</span><br><span class="line">			ans = mid;</span><br><span class="line">			l = mid - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最小大于</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">F2</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> r = v<span class="number">1.</span><span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> ans, mid;</span><br><span class="line">	<span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">		mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(x &gt; v1[mid])&#123;</span><br><span class="line">			ans = mid;</span><br><span class="line">			l = mid - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最长递增子序列</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">F1</span><span class="params">(<span class="type">int</span> x, vector&lt;<span class="type">int</span>&gt; &amp; v)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> r = v<span class="number">1.</span><span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> mid;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">		mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(x &gt; v[mid]) l = mid + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			r = mid - <span class="number">1</span>;</span><br><span class="line">			ans = mid;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最长递减子序列</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">F2</span><span class="params">(<span class="type">int</span> x, vector&lt;<span class="type">int</span>&gt; &amp; v)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> r = v<span class="number">1.</span><span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> mid;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">		mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(x &lt; v[mid]) l = mid + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			r = mid - <span class="number">1</span>;</span><br><span class="line">			ans = mid;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="博弈论（SG定理）"><a href="#博弈论（SG定理）" class="headerlink" title="博弈论（SG定理）"></a>博弈论（<code>SG</code>定理）</h3><p>所有相同子游戏最终<code>sg</code>异或结果为0则先手必败，不为零则先手必胜，<code>sg</code>为从某一节点开始，到最大限度往前便利后的第一个没有出现的自然数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 计算集合中缺失的最小非负整数（mex函数）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mex</span><span class="params">(<span class="type">const</span> set&lt;<span class="type">int</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s.<span class="built_in">count</span>(m)) m++;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入石子堆的石子数量：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">// 允许的操作：每次可以取 1、2 或 3 个石子</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; moves = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="comment">// 动态规划数组，sg[i] 表示当前石子数量为 i 时的 SG 值</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sg</span><span class="params">(n<span class="number">+1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    sg[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// 没有石子时，SG值为0</span></span><br><span class="line">    <span class="comment">// 计算每个状态的 SG 值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; nextSG;</span><br><span class="line">        <span class="comment">// 对每一种允许的走法，计算下一状态的 SG 值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> move : moves) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i - move &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                nextSG.<span class="built_in">insert</span>(sg[i - move]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sg[i] = <span class="built_in">mex</span>(nextSG);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;状态 &quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot; 的 SG 值为：&quot;</span> &lt;&lt; sg[n] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(sg[n] != <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;先手必胜\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;后手必胜\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="乘积最大子数组"><a href="#乘积最大子数组" class="headerlink" title="乘积最大子数组"></a>乘积最大子数组</h3><p>保留乘积最小的结果以准备触底反弹</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line"><span class="type">int</span> min1 = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> max1 = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ans1 = INT_MIN;</span><br><span class="line"><span class="type">int</span> pre1 = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> pre2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; v<span class="number">1.</span><span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">    max1 = <span class="built_in">max</span>(&#123;v1[i], pre1 * v1[i], pre2 * v1[i]&#125;);</span><br><span class="line">    min1 = <span class="built_in">min</span>(&#123;v1[i], pre1 * v1[i], pre2 * v1[i]&#125;);</span><br><span class="line">    pre1 = max1;</span><br><span class="line">    pre2 = min1;</span><br><span class="line">    ans1 = <span class="built_in">max</span>(ans1, max1);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans1 &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><p>求某一侧第一个 大于或者小于其的数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="comment">// 求右边第一个比其大的数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; v1, <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="type">int</span> size=v<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line">	stack&lt;<span class="type">int</span>&gt; s1;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">		<span class="keyword">while</span>(!s<span class="number">1.</span><span class="built_in">empty</span>() &amp;&amp; v1[i] &gt; v1[s<span class="number">1.</span><span class="built_in">top</span>()])&#123;</span><br><span class="line">			ans[s<span class="number">1.</span><span class="built_in">top</span>()] = i<span class="number">+1</span>;</span><br><span class="line">			s<span class="number">1.</span><span class="built_in">pop</span>();</span><br><span class="line">		&#125;</span><br><span class="line">        s<span class="number">1.</span><span class="built_in">push</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">		cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;v1[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">solve</span>(v1, n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="动态堆寻找中位数"><a href="#动态堆寻找中位数" class="headerlink" title="动态堆寻找中位数"></a>动态堆寻找中位数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"><span class="type">int</span> n;               <span class="comment">// 操作次数</span></span><br><span class="line">string op;            <span class="comment">// 输入的操作命令</span></span><br><span class="line"><span class="type">int</span> size1 = <span class="number">0</span>;        <span class="comment">// 当前栈的大小</span></span><br><span class="line"><span class="type">int</span> minsize = <span class="number">0</span>;      <span class="comment">// 小根堆中元素的数量</span></span><br><span class="line"><span class="type">int</span> maxsize = <span class="number">0</span>;      <span class="comment">// 大根堆中元素的数量</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">stack1</span><span class="params">(N)</span></span>;    <span class="comment">// 用于模拟栈，存储所有插入的数字</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; minheap;  <span class="comment">// 小根堆，用于存储大于等于中位数的数</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; maxheap;  <span class="comment">// 大根堆，用于存储小于等于中位数的数</span></span><br><span class="line"><span class="comment">// 用于延迟删除的映射：记录需要从堆中删除但还未实际删除的数字及其次数</span></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; delayed;  </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prune</span><span class="params">(T &amp;heap)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当堆不为空时，检查堆顶元素是否在延迟删除映射中</span></span><br><span class="line">    <span class="keyword">while</span> (!heap.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> num = heap.<span class="built_in">top</span>();</span><br><span class="line">        <span class="keyword">if</span> (delayed.<span class="built_in">count</span>(num)) &#123;  <span class="comment">// 如果堆顶元素需要被删除</span></span><br><span class="line">            delayed[num]--;        <span class="comment">// 延迟删除计数减一</span></span><br><span class="line">            <span class="keyword">if</span> (delayed[num] == <span class="number">0</span>)</span><br><span class="line">                delayed.<span class="built_in">erase</span>(num);  <span class="comment">// 如果次数为0则从映射中删除</span></span><br><span class="line">            heap.<span class="built_in">pop</span>();              <span class="comment">// 弹出堆顶元素</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 堆顶元素未被延迟删除，退出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">balance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果大根堆的元素比小根堆多超过1个，则将大根堆的堆顶移动到小根堆中</span></span><br><span class="line">    <span class="keyword">if</span> (maxsize &gt; minsize + <span class="number">1</span>) &#123;</span><br><span class="line">        minheap.<span class="built_in">push</span>(maxheap.<span class="built_in">top</span>());</span><br><span class="line">        maxheap.<span class="built_in">pop</span>();</span><br><span class="line">        minsize++;</span><br><span class="line">        maxsize--;</span><br><span class="line">        <span class="built_in">prune</span>(maxheap);  <span class="comment">// 清理大根堆堆顶可能存在的延迟删除元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果大根堆的元素数目小于小根堆，则将小根堆的堆顶移动到大根堆中</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (maxsize &lt; minsize) &#123;</span><br><span class="line">        maxheap.<span class="built_in">push</span>(minheap.<span class="built_in">top</span>());</span><br><span class="line">        minheap.<span class="built_in">pop</span>();</span><br><span class="line">        maxsize++;</span><br><span class="line">        minsize--;</span><br><span class="line">        <span class="built_in">prune</span>(minheap);  <span class="comment">// 清理小根堆堆顶可能存在的延迟删除元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 标记该数字需要延迟删除</span></span><br><span class="line">    delayed[num]++;</span><br><span class="line">    <span class="keyword">if</span> (num &lt;= maxheap.<span class="built_in">top</span>()) &#123;</span><br><span class="line">        maxsize--;</span><br><span class="line">        <span class="comment">// 如果待删除数字恰好是大根堆堆顶，则立即清理</span></span><br><span class="line">        <span class="keyword">if</span> (num == maxheap.<span class="built_in">top</span>()) &#123;</span><br><span class="line">            <span class="built_in">prune</span>(maxheap);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        minsize--;</span><br><span class="line">        <span class="comment">// 如果待删除数字恰好是小根堆堆顶，则立即清理</span></span><br><span class="line">        <span class="keyword">if</span> (num == minheap.<span class="built_in">top</span>())</span><br><span class="line">            <span class="built_in">prune</span>(minheap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">balance</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="comment">// peek</span></span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">1</span>] == <span class="string">&#x27;e&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (size1 == <span class="number">0</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Invalid&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">// 中位数为大根堆的堆顶</span></span><br><span class="line">                cout &lt;&lt; maxheap.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// pop</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op[<span class="number">1</span>] == <span class="string">&#x27;o&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (size1 == <span class="number">0</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Invalid&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 输出栈顶元素</span></span><br><span class="line">                cout &lt;&lt; stack1[size1 - <span class="number">1</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="comment">// 删除栈顶元素，并在堆中延迟删除对应数字</span></span><br><span class="line">                <span class="built_in">erase</span>(stack1[--size1]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// push</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; stack1[size1++];</span><br><span class="line">            <span class="comment">// 如果大根堆为空，则直接插入到大根堆中</span></span><br><span class="line">            <span class="keyword">if</span> (maxsize == <span class="number">0</span>) &#123;</span><br><span class="line">                maxheap.<span class="built_in">push</span>(stack1[size1 - <span class="number">1</span>]);</span><br><span class="line">                maxsize++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 根据新插入数字与当前中位数比较，决定放入哪个堆</span></span><br><span class="line">            <span class="keyword">if</span> (stack1[size1 - <span class="number">1</span>] &gt; maxheap.<span class="built_in">top</span>()) &#123;</span><br><span class="line">                minheap.<span class="built_in">push</span>(stack1[size1 - <span class="number">1</span>]);</span><br><span class="line">                minsize++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxheap.<span class="built_in">push</span>(stack1[size1 - <span class="number">1</span>]);</span><br><span class="line">                maxsize++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 保持两个堆的平衡</span></span><br><span class="line">            <span class="built_in">balance</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>) -&gt; ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t; </span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="大小根堆"><a href="#大小根堆" class="headerlink" title="大小根堆"></a>大小根堆</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 向堆中插入新元素，使其满足大顶堆性质</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapInsert</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(arr[i] &gt; arr[(i<span class="number">-1</span>)/<span class="number">2</span>]) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(arr[i], arr[(i<span class="number">-1</span>)/<span class="number">2</span>]);</span><br><span class="line">        i = (i<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 堆化：从下标 i 开始向下调整，使子树满足大顶堆性质，size 为堆的大小</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapify</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> i, <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> maxIdx;  <span class="comment">// 保存左右孩子中较大值的下标</span></span><br><span class="line">    <span class="type">int</span> idx;     <span class="comment">// 保存父节点与较大孩子中较大者的下标</span></span><br><span class="line">    <span class="keyword">while</span>(l &lt; size) &#123;</span><br><span class="line">        <span class="comment">// 在左右孩子中选择较大者</span></span><br><span class="line">        maxIdx = (l + <span class="number">1</span> &lt; size &amp;&amp; arr[l<span class="number">+1</span>] &gt; arr[l]) ? l + <span class="number">1</span> : l;</span><br><span class="line">        <span class="comment">// 选择父节点与较大孩子中较大者</span></span><br><span class="line">        idx = (arr[i] &gt; arr[maxIdx]) ? i : maxIdx;</span><br><span class="line">        <span class="keyword">if</span>(idx == i) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">swap</span>(arr[i], arr[idx]);</span><br><span class="line">            i = idx;</span><br><span class="line">            l = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">heapPop</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> &amp;size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> top = arr[<span class="number">0</span>];             <span class="comment">// 保存堆顶元素</span></span><br><span class="line">    <span class="built_in">swap</span>(arr[<span class="number">0</span>], arr[size - <span class="number">1</span>]);    <span class="comment">// 将堆顶与最后一个元素交换</span></span><br><span class="line">    size--;                       <span class="comment">// 删除最后一个元素</span></span><br><span class="line">    <span class="built_in">heapify</span>(arr, <span class="number">0</span>, size);        <span class="comment">// 从顶端重新调整堆</span></span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="二叉树的序列化与反序列化及先中序构造"><a href="#二叉树的序列化与反序列化及先中序构造" class="headerlink" title="二叉树的序列化与反序列化及先中序构造"></a>二叉树的序列化与反序列化及先中序构造</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">	<span class="type">int</span> val;</span><br><span class="line">	TreeNode * left, * right;</span><br><span class="line">	<span class="built_in">TreeNode</span> (<span class="type">int</span> x)&#123;</span><br><span class="line">		val = x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//先序的序列化与反序列化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        string r;</span><br><span class="line">        <span class="built_in">serialize_h</span>(root,r);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">deserialize</span><span class="params">(string data)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; vals = <span class="built_in">split</span>(data,<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">deserialize_h</span>(vals,cnt);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">serialize_h</span><span class="params">(TreeNode* root,string&amp; r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            r+=<span class="string">&quot;#,&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            r+=<span class="built_in">to_string</span>(root-&gt;val)+<span class="string">&quot;,&quot;</span>;</span><br><span class="line">            <span class="built_in">serialize_h</span>(root-&gt;left,r);</span><br><span class="line">            <span class="built_in">serialize_h</span>(root-&gt;right,r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">deserialize_h</span><span class="params">(<span class="type">const</span> vector&lt;string&gt;&amp; vals,<span class="type">int</span>&amp; cnt)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt &gt;= vals.<span class="built_in">size</span>() || vals[cnt]==<span class="string">&quot;#&quot;</span> )&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode* node = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="built_in">stoi</span>(vals[cnt++]));</span><br><span class="line">        node-&gt;left=<span class="built_in">deserialize_h</span>(vals,cnt);</span><br><span class="line">        node-&gt;right=<span class="built_in">deserialize_h</span>(vals,cnt);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">split</span><span class="params">(<span class="type">const</span> string&amp;s,<span class="type">char</span> delimiter)</span></span>&#123;</span><br><span class="line">        vector&lt;string&gt; tokens;</span><br><span class="line">        string token;</span><br><span class="line">        <span class="function">istringstream <span class="title">tokenStream</span><span class="params">(s)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(tokenStream,token,delimiter))&#123;</span><br><span class="line">            tokens.<span class="built_in">push_back</span>(token);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tokens;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//按层的序列化与反序列化</span></span><br><span class="line">    <span class="function">string <span class="title">serialize1</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        string result;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(node!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                result += <span class="built_in">to_string</span>(node-&gt;val)+<span class="string">&quot;,&quot;</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;<span class="keyword">else</span> result+=<span class="string">&quot;#,&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">deserialize1</span><span class="params">(string data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(data.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="function">stringstream <span class="title">ss</span><span class="params">(data)</span></span>;</span><br><span class="line">        string item;</span><br><span class="line">        <span class="built_in">getline</span>(ss,item,<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="built_in">stoi</span>(item));</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">getline</span>(ss,item,<span class="string">&#x27;,&#x27;</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span>(item==<span class="string">&quot;#&quot;</span>)&#123;</span><br><span class="line">                    node-&gt;left=<span class="literal">nullptr</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    node-&gt;left = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="built_in">stoi</span>(item));</span><br><span class="line">                    q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">getline</span>(ss,item,<span class="string">&#x27;,&#x27;</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span>(item==<span class="string">&quot;#&quot;</span>)&#123;</span><br><span class="line">                    node-&gt;right=<span class="literal">nullptr</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    node-&gt;right=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="built_in">stoi</span>(item));</span><br><span class="line">                    q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><h4 id="一维"><a href="#一维" class="headerlink" title="一维"></a>一维</h4><h5 id="单点修改区间查询"><a href="#单点修改区间查询" class="headerlink" title="单点修改区间查询"></a>单点修改区间查询</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">1</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v1</span><span class="params">(N)</span></span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">low</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(i &lt;= n)&#123;</span><br><span class="line">		v1[i] += x;</span><br><span class="line">		i += <span class="built_in">low</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(i)&#123;</span><br><span class="line">		ans += v1[i];</span><br><span class="line">		i -= <span class="built_in">low</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">range</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">get</span>(j) - <span class="built_in">get</span>(i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i ++)&#123;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		<span class="built_in">add</span>(i, x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, op, x, y; i &lt; m; i ++)&#123;</span><br><span class="line">		cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		<span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">add</span>(x, y);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			cout &lt;&lt; <span class="built_in">range</span>(x, y) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="区间修改单点查询"><a href="#区间修改单点查询" class="headerlink" title="区间修改单点查询"></a>区间修改单点查询</h5><p>在单点基础上，利用一维差分，最后求从0到i的累加和即为i点的值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">1</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">v1</span><span class="params">(N, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">low</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(i &lt;= n)&#123;</span><br><span class="line">		v1[i] += x;</span><br><span class="line">		i += <span class="built_in">low</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">get</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(i)&#123;</span><br><span class="line">		ans += v1[i];</span><br><span class="line">		i -= <span class="built_in">low</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">range</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">get</span>(j) - <span class="built_in">get</span>(i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i ++)&#123;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		<span class="built_in">add</span>(i, x);</span><br><span class="line">		<span class="built_in">add</span>(i + <span class="number">1</span>, -x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, op, x, y, z; i &lt; m; i ++)&#123;</span><br><span class="line">		cin &gt;&gt; op;</span><br><span class="line">		<span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">			cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">			<span class="built_in">add</span>(x, z);</span><br><span class="line">			<span class="built_in">add</span>(y + <span class="number">1</span>, -z);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			cin &gt;&gt; x;</span><br><span class="line">			cout &lt;&lt; <span class="built_in">range</span>(<span class="number">1</span>, x) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="范围修改范围查询"><a href="#范围修改范围查询" class="headerlink" title="范围修改范围查询"></a>范围修改范围查询</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">1</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">v1</span><span class="params">(N)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">v2</span><span class="params">(N)</span></span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">low</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> x, vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; &amp; v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= n)&#123;</span><br><span class="line">        v[i] += x;</span><br><span class="line">        i += <span class="built_in">low</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">get</span><span class="params">(<span class="type">int</span> i, vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; &amp; v)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i)&#123;</span><br><span class="line">        ans += v[i];</span><br><span class="line">        i -= <span class="built_in">low</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">range</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> j * <span class="built_in">get</span>(j, v1) - <span class="built_in">get</span>(j, v2) - ((i - <span class="number">1</span>) * <span class="built_in">get</span>(i - <span class="number">1</span>, v1) - <span class="built_in">get</span>(i <span class="number">-1</span>, v2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">long</span> <span class="type">long</span> w)</span></span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(x, w, v1);</span><br><span class="line">    <span class="built_in">add</span>(y + <span class="number">1</span>, -w, v1);</span><br><span class="line">    <span class="built_in">add</span>(x, (x - <span class="number">1</span>) * w, v2);</span><br><span class="line">    <span class="built_in">add</span>(y + <span class="number">1</span>, - y * w, v2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i ++)&#123;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="built_in">add</span>(i, i, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, op, x, y, z; i &lt; m; i ++)&#123;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">            cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">            <span class="built_in">add</span>(x, y, z);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">range</span>(x,  y) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二维"><a href="#二维" class="headerlink" title="二维"></a>二维</h4><h5 id="单点修改范围查询"><a href="#单点修改范围查询" class="headerlink" title="单点修改范围查询"></a>单点修改范围查询</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">low</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i &amp; -i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp; bit, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> w, <span class="type">int</span> n, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">low</span>(i)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = y; j &lt;= m; j += <span class="built_in">low</span>(j)) &#123;</span><br><span class="line">            bit[i][j] += w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;bit, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= <span class="built_in">low</span>(i)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = y; j &gt; <span class="number">0</span>; j -= <span class="built_in">low</span>(j)) &#123;</span><br><span class="line">            ans += bit[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;bit, <span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x1 &gt; x2 || y1 &gt; y2) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(bit, x2, y2) - <span class="built_in">query</span>(bit, x1 - <span class="number">1</span>, y2) - <span class="built_in">query</span>(bit, x2, y1 - <span class="number">1</span>) + <span class="built_in">query</span>(bit, x1 - <span class="number">1</span>, y1 - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">v1</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>, <span class="number">0</span>)); <span class="comment">// 原始数组</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">bit</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>, <span class="number">0</span>)); <span class="comment">// 树状数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            cin &gt;&gt; v1[i][j];</span><br><span class="line">            <span class="built_in">add</span>(bit, i, j, v1[i][j], n, m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="type">int</span> type;</span><br><span class="line">    <span class="type">int</span> x, y, w;</span><br><span class="line">    <span class="type">int</span> diff;</span><br><span class="line">    <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        cin &gt;&gt; type;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>) &#123; </span><br><span class="line">            cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;</span><br><span class="line">            diff = w - v1[x][y];</span><br><span class="line">            v1[x][y] = w;</span><br><span class="line">            <span class="built_in">add</span>(bit, x, y, diff, n, m);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">            cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">get</span>(bit, x1, y1, x2, y2) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; t;</span></span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="范围查询范围修改"><a href="#范围查询范围修改" class="headerlink" title="范围查询范围修改"></a>范围查询范围修改</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2050</span>;</span><br><span class="line"><span class="type">int</span> bit1[N][N];</span><br><span class="line"><span class="type">int</span> bit2[N][N];</span><br><span class="line"><span class="type">int</span> bit3[N][N];</span><br><span class="line"><span class="type">int</span> bit4[N][N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a, b, c, d, w;</span><br><span class="line"><span class="type">int</span> v1, v2, v3, v4;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">low</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	v1 = v;</span><br><span class="line">    v2 = x * v;</span><br><span class="line">    v3 = y * v;</span><br><span class="line">    v4 = x * y * v;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">low</span>(i))&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = y; j &lt;= m; j += <span class="built_in">low</span>(j))&#123;</span><br><span class="line">			bit1[i][j] += v1;</span><br><span class="line">			bit2[i][j] += v2;</span><br><span class="line">			bit3[i][j] += v3;</span><br><span class="line">			bit4[i][j] += v4;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = x; i; i -= <span class="built_in">low</span>(i))&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = y; j; j -= <span class="built_in">low</span>(j))&#123;</span><br><span class="line">			ans += (x + <span class="number">1</span>) * (y + <span class="number">1</span>) * bit1[i][j] - (y + <span class="number">1</span>) * bit2[i][j] - (x + <span class="number">1</span>) * bit3[i][j] + bit4[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">add</span>(x1, y1, v);</span><br><span class="line">	<span class="built_in">add</span>(x2 + <span class="number">1</span>, y2 + <span class="number">1</span>, v);</span><br><span class="line">	<span class="built_in">add</span>(x1, y2 + <span class="number">1</span>, - v);</span><br><span class="line">	<span class="built_in">add</span>(x2 + <span class="number">1</span>, y1, - v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">get</span>(x2, y2) + <span class="built_in">get</span>(x1 - <span class="number">1</span>, y1 - <span class="number">1</span>) - <span class="built_in">get</span>(x1 - <span class="number">1</span>, y2) - <span class="built_in">get</span>(x2, y1 - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">char</span> C)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(C == <span class="string">&#x27;L&#x27;</span>)&#123;</span><br><span class="line">		cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; w;</span><br><span class="line">		<span class="built_in">add</span>(a, b, c, d, w);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(C != <span class="string">&#x27;X&#x27;</span>)&#123;</span><br><span class="line">		cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">		cout &lt;&lt; <span class="built_in">get</span>(a, b, c, d) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">char</span> C;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; C) &#123;</span><br><span class="line">        <span class="built_in">solve</span>(C);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="股票dp"><a href="#股票dp" class="headerlink" title="股票dp"></a>股票dp</h3><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="ordered-set"><a href="#ordered-set" class="headerlink" title="ordered_set"></a>ordered_set</h3><p>解释各个部分的作用</p>
<table>
<thead>
<tr>
<th>代码部分</th>
<th>功能</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>s.insert(5)</code></td>
<td>插入元素</td>
<td><code>ordered_set</code> 自动去重</td>
</tr>
<tr>
<td><code>s.erase(7)</code></td>
<td>删除元素</td>
<td>需先检查元素是否存在</td>
</tr>
<tr>
<td><code>find_by_order(k)</code></td>
<td>获取第 k 小元素</td>
<td><code>0-based</code>，需先检查是否为空</td>
</tr>
<tr>
<td><code>order_of_key(10)</code></td>
<td>获取小于某个值的元素数量</td>
<td><code>O(log n)</code> 复杂度</td>
</tr>
<tr>
<td><code>find(5)</code></td>
<td>查找元素</td>
<td>直接返回迭代器</td>
</tr>
<tr>
<td><code>s.size()</code></td>
<td>获取集合大小</td>
<td><code>O(1)</code> 复杂度</td>
</tr>
<tr>
<td><code>s.clear()</code></td>
<td>清空集合</td>
<td>直接清空</td>
</tr>
</tbody></table>
<p>时间复杂度</p>
<ul>
<li>插入：<code>O(log n)</code></li>
<li>删除：<code>O(log n)</code></li>
<li>查找：<code>O(log n)</code></li>
<li>获取第 k 小元素：<code>O(log n)</code></li>
<li>获取小于 x 的元素数量：<code>O(log n)</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext/pb_ds/tree_policy.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> tree&lt;</span><br><span class="line">    <span class="type">int</span>, </span><br><span class="line">    null_type, </span><br><span class="line">    less&lt;<span class="type">int</span>&gt;, </span><br><span class="line">    rb_tree_tag, </span><br><span class="line">    tree_order_statistics_node_update</span><br><span class="line">&gt; ordered_set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ordered_set s;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">find</span>(<span class="number">7</span>) != s.<span class="built_in">end</span>()) s.<span class="built_in">erase</span>(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The 2nd smallest element is: &quot;</span> &lt;&lt; *s.<span class="built_in">find_by_order</span>(<span class="number">1</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">find</span>(<span class="number">5</span>) != s.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;5 exists in the set\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Minimum element: &quot;</span> &lt;&lt; *s.<span class="built_in">find_by_order</span>(<span class="number">0</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Maximum element: &quot;</span> &lt;&lt; *s.<span class="built_in">find_by_order</span>(s.<span class="built_in">size</span>() - <span class="number">1</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><h4 id="整数与字符串转化"><a href="#整数与字符串转化" class="headerlink" title="整数与字符串转化"></a>整数与字符串转化</h4><ul>
<li><p>整数变字符串<code>to_string(x)</code></p>
</li>
<li><p>字符串变整数<code>stoi(s)</code></p>
</li>
</ul>
<h4 id="字符串输入与分割"><a href="#字符串输入与分割" class="headerlink" title="字符串输入与分割"></a>字符串输入与分割</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s1;</span><br><span class="line"><span class="built_in">getline</span>(cin, s1);</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line"><span class="function">stringstream <span class="title">ss</span><span class="params">(s1)</span></span>;</span><br><span class="line">string temp;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">getline</span>(ss, temp, <span class="string">&#x27;,&#x27;</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(temp[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        temp = temp.<span class="built_in">substr</span>(<span class="number">1</span>);</span><br><span class="line">        v<span class="number">1.</span><span class="built_in">push_back</span>(-<span class="built_in">stoi</span>(temp));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        v<span class="number">1.</span><span class="built_in">push_back</span>(<span class="built_in">stoi</span>(temp));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="改变大小写"><a href="#改变大小写" class="headerlink" title="改变大小写"></a>改变大小写</h4><p><code>transform(起点, 终点, 输出位置, 处理函数)</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变小写</span></span><br><span class="line"><span class="built_in">transform</span>(s<span class="number">1.</span><span class="built_in">begin</span>(), s<span class="number">1.</span><span class="built_in">end</span>(), s<span class="number">1.</span><span class="built_in">begin</span>(), ::tolower);</span><br><span class="line"><span class="comment">// 变大写</span></span><br><span class="line"><span class="built_in">transform</span>(s<span class="number">1.</span><span class="built_in">begin</span>(), s<span class="number">1.</span><span class="built_in">end</span>(), s<span class="number">1.</span><span class="built_in">begin</span>(), ::toupper);</span><br><span class="line"><span class="comment">// 转换到另一个字符串</span></span><br><span class="line">string src = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">string dest;</span><br><span class="line">dest.<span class="built_in">resize</span>(src.<span class="built_in">size</span>());</span><br><span class="line"><span class="built_in">transform</span>(src.<span class="built_in">begin</span>(), src.<span class="built_in">end</span>(), dest.<span class="built_in">begin</span>(), ::tolower);</span><br><span class="line"><span class="comment">// dest 现在是 &quot;hello&quot;，原始 src 不变</span></span><br></pre></td></tr></table></figure>





<h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><h3 id="重载运算符号"><a href="#重载运算符号" class="headerlink" title="重载运算符号"></a>重载运算符号</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">my</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r, index;</span><br><span class="line">    <span class="built_in">my</span>(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)&#123;</span><br><span class="line">        l = a, r = b, index = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> my x) <span class="type">const</span> &#123;  </span><br><span class="line">        	<span class="comment">// 优先队列中比较关系反着来</span></span><br><span class="line">            <span class="keyword">return</span> l &gt; x.l;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="求最大的最小或者最小的最大问题"><a href="#求最大的最小或者最小的最大问题" class="headerlink" title="求最大的最小或者最小的最大问题"></a>求最大的最小或者最小的最大问题</h3><p>大概率是用二分来查询最合适的答案，具体算法看题</p>
<h3 id="圆周率"><a href="#圆周率" class="headerlink" title="圆周率"></a>圆周率</h3><p>$$<br>\pi<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> pi	 =	<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br></pre></td></tr></table></figure>



<h3 id="求容器最大值"><a href="#求容器最大值" class="headerlink" title="求容器最大值"></a>求容器最大值</h3><p><code>*max_element(vec.begin(), vec.end());</code></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Git better</title>
    <url>/learngit.html</url>
    <content><![CDATA[<h1 id="Git常用指令"><a href="#Git常用指令" class="headerlink" title="Git常用指令"></a>Git常用指令</h1><ul>
<li>自报家门</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>查询家门</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>
<hr>
<p>创建SSH连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在本地生成密钥和公钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;</span><br><span class="line"></span><br><span class="line">获取公钥（id_rsa.pub）后在Github上创建SSHKey</span><br><span class="line"></span><br><span class="line">验证是否成功</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>pwd 用于显示当前目录</li>
</ul>
<p><code>$ pwd</code></p>
<hr>
<ul>
<li>init 把当前目录变成Git可以管理的仓库</li>
</ul>
<p><code>$ git init</code></p>
<hr>
<ul>
<li>la -ah 用于查看隐藏的.git目录</li>
</ul>
<p><code>$ ls -ah</code></p>
<hr>
<ul>
<li>add 把文件添加到仓库</li>
</ul>
<p><code>$ git add &lt;file&gt;</code></p>
<hr>
<ul>
<li>commit 把文件提交到仓库</li>
</ul>
<p><code>$ git commit -m &lt;message&gt;</code></p>
<hr>
<ul>
<li>status 查看库状态</li>
</ul>
<p><code>$ git status</code></p>
<hr>
<ul>
<li>dif 查看修改内容</li>
</ul>
<p><code>$ git diff &lt;file&gt;</code></p>
<hr>
<ul>
<li>log 查看历史记录</li>
</ul>
<p><code>$ git log</code><br><code>$ git log --pretty=oneline</code></p>
<ul>
<li>reflog 查看每一次命令</li>
</ul>
<p><code>$ git reflog</code></p>
<hr>
<ul>
<li>reset 版本回退</li>
</ul>
<p>–hard会回退到上个版本的已提交状态，而–soft会回退到上个版本的未提交状态，–mixed会回退到上个版本已添加但未提交的状态.</p>
<p><code>$ git reset --hard HEAD~&lt;num&gt;</code><br><code>$ git reset --hard &lt;version&gt;</code></p>
<hr>
<ul>
<li>cat 查看内容</li>
</ul>
<p><code>$ cat &lt;file&gt;</code></p>
<hr>
<ul>
<li>撤销工作区修改</li>
</ul>
<p><code>$ git checkout -- &lt;file&gt;</code></p>
<ul>
<li>撤销暂存区修改</li>
</ul>
<p><code>$ git reset HEAD &lt;file&gt;</code></p>
<hr>
<ul>
<li>删除文件</li>
</ul>
<p><code>$ git rm &lt;file&gt;</code></p>
<hr>
<ul>
<li>添加远程库</li>
</ul>
<p><code>$ git remote add origin git@github.com:&lt;yourname&gt;/learngit.git</code></p>
<ul>
<li>推送</li>
</ul>
<p><code>$ git push -u origin master</code></p>
<ul>
<li>本地做了提交后</li>
</ul>
<p><code>$ git push origin master</code></p>
<ul>
<li>查看远程库信息</li>
</ul>
<p><code>$ git remote -v</code></p>
<ul>
<li>删除远程库</li>
</ul>
<p><code>$ git remote rm &lt;name&gt;</code></p>
<hr>
<ul>
<li>克隆</li>
</ul>
<p><code>$ git clone git@github.com:&lt;name&gt;/gitskills.git</code></p>
<hr>
<ul>
<li>创建并切换至新分支</li>
</ul>
<p><code>$ git checkout -b &lt;name&gt;</code><br><code>$ git switch -c &lt;name&gt;</code> </p>
<p>等同于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git switch master</span><br></pre></td></tr></table></figure>

<ul>
<li>查看分支</li>
</ul>
<p><code>$ git branch</code></p>
<ul>
<li>合并分支</li>
</ul>
<p><code>$ git merge &lt;name&gt;</code></p>
<ul>
<li>删除分支</li>
</ul>
<p><code>$ git branch -d &lt;name&gt;</code></p>
<ul>
<li>强制删除</li>
</ul>
<p><code>$ git branch -D &lt;name&gt;</code></p>
<ul>
<li><code>--no-ff</code>方式的<code>git merge</code></li>
</ul>
<p><code>$ git merge --no-ff -m &quot;merge with no-ff&quot; &lt;name&gt;</code></p>
<ul>
<li>stash储藏工作现场</li>
</ul>
<p><code>$ git stash</code></p>
<ul>
<li>查看</li>
</ul>
<p><code>$ git stash list</code></p>
<ul>
<li>恢复现场</li>
</ul>
<p>恢复并删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash apply</span><br><span class="line">$ git stash drop</span><br></pre></td></tr></table></figure>
<p>或<br><code>$ git stash pop</code></p>
<ul>
<li>复制修改</li>
</ul>
<p><code>$ git cherry-pick &lt;version&gt;</code></p>
<ul>
<li>推送冲突后抓取文件到本地合并</li>
</ul>
<p><code>$ git pull</code></p>
<ul>
<li>变基</li>
</ul>
<p><code>$ git rebase</code></p>
<hr>
<ul>
<li>打标签</li>
</ul>
<p><code>$ git tag &lt;tag&gt;</code><br><code>$ git tag &lt;tag&gt; &lt;version&gt;</code></p>
<p>还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：</p>
<p><code>$ git tag -a &lt;tag&gt; -m &quot;info&quot; &lt;version&gt;</code></p>
<ul>
<li>查看标签</li>
</ul>
<p><code>$ git tag</code></p>
<ul>
<li>查看标签内容</li>
</ul>
<p><code>$ git show &lt;tag&gt;</code></p>
<ul>
<li>删除标签</li>
</ul>
<p><code>$ git tag -d &lt;tag&gt;</code></p>
<ul>
<li>推送标签</li>
</ul>
<p><code>$ git push origin &lt;tag&gt;</code><br><code>$ git push origin --tags</code></p>
<ul>
<li>删除远程标签</li>
</ul>
<p>先删除本地再：<br><code>$ git push origin :refs/tags/&lt;tag&gt;</code></p>
<p>补充</p>
<p><img src="/learngit/git1.png" alt="git1"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://liaoxuefeng.com/">廖雪峰</a></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Better</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo better</title>
    <url>/learnhexo.html</url>
    <content><![CDATA[<h1 id="来时路"><a href="#来时路" class="headerlink" title="来时路"></a>来时路</h1><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1：无法初始化"><a href="#1：无法初始化" class="headerlink" title="1：无法初始化"></a>1：无法初始化</h3><p>hexo init （blog）时因为代理无法正常初始化完成，修改代理地址，例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:7890</span><br><span class="line">git config --global https.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure>

<p>这将允许 Git 通过本地代理进行连接。如果不再需要代理，或者想要清除代理设置，可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>


<h3 id="2：npm速度慢"><a href="#2：npm速度慢" class="headerlink" title="2：npm速度慢"></a>2：npm速度慢</h3><p><a href="https://npmmirror.com/">淘宝镜像</a></p>
<p><img src="/learnhexo/taobao1.png" alt="p1"></p>
<p>之后在npm前加个c!</p>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="建站前"><a href="#建站前" class="headerlink" title="建站前"></a>建站前</h3><p>在gitbase中cd到博客文件夹</p>
<p>下载hexo框架</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<hr>
<p>初始化博客项目（若已经在下一级文件夹中可不加folder）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init [folder] </span><br></pre></td></tr></table></figure>
<hr>
<p>进入folder</p>
<p>安装依赖项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<hr>
<p>下载部署器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<hr>
<p>之后可随时部署到Github上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h3 id="建站后"><a href="#建站后" class="headerlink" title="建站后"></a>建站后</h3><p>new 新建一篇文章</p>
<p>-p 自定义文章路径</p>
<p>-r 如果存在则替换</p>
<p>-s 文章别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p>clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br></pre></td></tr></table></figure>
<hr>
<p>generate 生成静态文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<hr>
<p>publish 发布草稿</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p>server 启动服务器</p>
<p>-p 重设端口</p>
<p>-s 只使用静态文件</p>
<p>-l 启用日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<hr>
<p>deploy 部署网站</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<hr>
<p>render 渲染文件<br>-o output destination</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>
<hr>
<p>migrate 从其他博客系统迁移内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo migrate&lt;type&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p>list 列出所有路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p>version 显示版本信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure>
<hr>
<p>config 列出网站的配置（_config.yml）。 如果指定了 key，则只展示配置中对应 key 的值；如果同时指定了 key 和 value，则将配置中对应的 key 的值修改为 value。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo config [key] [value]</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://dayuzy.com/">资深技术博客</a></p>
<p><a href="https://blog.csdn.net/cat_bayi/article/details/128725230">CSDN良心教学</a></p>
<p><a href="https://mp.weixin.qq.com/s/GmTmhpkB0QmoHIL5bmXQGw">小岛码农</a></p>
<p><a href="https://hexo.io/zh-cn/">官方文档</a></p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>Better</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
